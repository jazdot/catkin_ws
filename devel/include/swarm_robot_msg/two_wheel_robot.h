// Generated by gencpp from file swarm_robot_msg/two_wheel_robot.msg
// DO NOT EDIT!


#ifndef SWARM_ROBOT_MSG_MESSAGE_TWO_WHEEL_ROBOT_H
#define SWARM_ROBOT_MSG_MESSAGE_TWO_WHEEL_ROBOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swarm_robot_msg
{
template <class ContainerAllocator>
struct two_wheel_robot_
{
  typedef two_wheel_robot_<ContainerAllocator> Type;

  two_wheel_robot_()
    : index()
    , x()
    , y()
    , orientation()
    , left_wheel_vel()
    , right_wheel_vel()  {
    }
  two_wheel_robot_(const ContainerAllocator& _alloc)
    : index(_alloc)
    , x(_alloc)
    , y(_alloc)
    , orientation(_alloc)
    , left_wheel_vel(_alloc)
    , right_wheel_vel(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _index_type;
  _index_type index;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_type;
  _x_type x;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_type;
  _y_type y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _orientation_type;
  _orientation_type orientation;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _left_wheel_vel_type;
  _left_wheel_vel_type left_wheel_vel;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _right_wheel_vel_type;
  _right_wheel_vel_type right_wheel_vel;





  typedef boost::shared_ptr< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> const> ConstPtr;

}; // struct two_wheel_robot_

typedef ::swarm_robot_msg::two_wheel_robot_<std::allocator<void> > two_wheel_robot;

typedef boost::shared_ptr< ::swarm_robot_msg::two_wheel_robot > two_wheel_robotPtr;
typedef boost::shared_ptr< ::swarm_robot_msg::two_wheel_robot const> two_wheel_robotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator1> & lhs, const ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.orientation == rhs.orientation &&
    lhs.left_wheel_vel == rhs.left_wheel_vel &&
    lhs.right_wheel_vel == rhs.right_wheel_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator1> & lhs, const ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "960dcd4f229cf2d627bb30845b3ae2f8";
  }

  static const char* value(const ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x960dcd4f229cf2d6ULL;
  static const uint64_t static_value2 = 0x27bb30845b3ae2f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_robot_msg/two_wheel_robot";
  }

  static const char* value(const ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# message type to describe all information needed for current status of two wheel robots\n"
"\n"
"# the dimensions of following array should be the same, each elements indicate a robot\n"
"int32[] index\n"
"float64[] x\n"
"float64[] y\n"
"float64[] orientation\n"
"float64[] left_wheel_vel\n"
"float64[] right_wheel_vel\n"
"\n"
;
  }

  static const char* value(const ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.orientation);
      stream.next(m.left_wheel_vel);
      stream.next(m.right_wheel_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct two_wheel_robot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_robot_msg::two_wheel_robot_<ContainerAllocator>& v)
  {
    s << indent << "index[]" << std::endl;
    for (size_t i = 0; i < v.index.size(); ++i)
    {
      s << indent << "  index[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.index[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.orientation[i]);
    }
    s << indent << "left_wheel_vel[]" << std::endl;
    for (size_t i = 0; i < v.left_wheel_vel.size(); ++i)
    {
      s << indent << "  left_wheel_vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_wheel_vel[i]);
    }
    s << indent << "right_wheel_vel[]" << std::endl;
    for (size_t i = 0; i < v.right_wheel_vel.size(); ++i)
    {
      s << indent << "  right_wheel_vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_wheel_vel[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_ROBOT_MSG_MESSAGE_TWO_WHEEL_ROBOT_H
