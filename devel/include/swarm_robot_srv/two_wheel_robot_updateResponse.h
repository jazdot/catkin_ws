// Generated by gencpp from file swarm_robot_srv/two_wheel_robot_updateResponse.msg
// DO NOT EDIT!


#ifndef SWARM_ROBOT_SRV_MESSAGE_TWO_WHEEL_ROBOT_UPDATERESPONSE_H
#define SWARM_ROBOT_SRV_MESSAGE_TWO_WHEEL_ROBOT_UPDATERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swarm_robot_srv
{
template <class ContainerAllocator>
struct two_wheel_robot_updateResponse_
{
  typedef two_wheel_robot_updateResponse_<ContainerAllocator> Type;

  two_wheel_robot_updateResponse_()
    : response_code(0)  {
    }
  two_wheel_robot_updateResponse_(const ContainerAllocator& _alloc)
    : response_code(0)  {
  (void)_alloc;
    }



   typedef uint8_t _response_code_type;
  _response_code_type response_code;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(ADD_FAIL_NO_RESPONSE)
  #undef ADD_FAIL_NO_RESPONSE
#endif
#if defined(_WIN32) && defined(ADD_FAIL_TOO_CROWDED)
  #undef ADD_FAIL_TOO_CROWDED
#endif
#if defined(_WIN32) && defined(ADD_FAIL_OCCUPIED)
  #undef ADD_FAIL_OCCUPIED
#endif
#if defined(_WIN32) && defined(DELETE_FAIL_NO_RESPONSE)
  #undef DELETE_FAIL_NO_RESPONSE
#endif
#if defined(_WIN32) && defined(DELETE_FAIL_EXCEED_QUANTITY)
  #undef DELETE_FAIL_EXCEED_QUANTITY
#endif
#if defined(_WIN32) && defined(FAIL_OTHER_REASONS)
  #undef FAIL_OTHER_REASONS
#endif

  enum {
    SUCCESS = 1u,
    ADD_FAIL_NO_RESPONSE = 2u,
    ADD_FAIL_TOO_CROWDED = 3u,
    ADD_FAIL_OCCUPIED = 4u,
    DELETE_FAIL_NO_RESPONSE = 5u,
    DELETE_FAIL_EXCEED_QUANTITY = 6u,
    FAIL_OTHER_REASONS = 7u,
  };


  typedef boost::shared_ptr< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct two_wheel_robot_updateResponse_

typedef ::swarm_robot_srv::two_wheel_robot_updateResponse_<std::allocator<void> > two_wheel_robot_updateResponse;

typedef boost::shared_ptr< ::swarm_robot_srv::two_wheel_robot_updateResponse > two_wheel_robot_updateResponsePtr;
typedef boost::shared_ptr< ::swarm_robot_srv::two_wheel_robot_updateResponse const> two_wheel_robot_updateResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator1> & lhs, const ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.response_code == rhs.response_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator1> & lhs, const ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_robot_srv

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1e5cdee217c8e44265e1af6666572cf";
  }

  static const char* value(const ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1e5cdee217c8e44ULL;
  static const uint64_t static_value2 = 0x265e1af6666572cfULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_robot_srv/two_wheel_robot_updateResponse";
  }

  static const char* value(const ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# response constants\n"
"uint8 SUCCESS = 1\n"
"uint8 ADD_FAIL_NO_RESPONSE = 2\n"
"uint8 ADD_FAIL_TOO_CROWDED = 3\n"
"    # too crowded when adding a number of robots\n"
"uint8 ADD_FAIL_OCCUPIED = 4\n"
"    # position ocupied when adding one robot\n"
"uint8 DELETE_FAIL_NO_RESPONSE = 5\n"
"uint8 DELETE_FAIL_EXCEED_QUANTITY = 6\n"
"uint8 FAIL_OTHER_REASONS = 7\n"
"# response fields\n"
"uint8 response_code\n"
"\n"
"\n"
;
  }

  static const char* value(const ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.response_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct two_wheel_robot_updateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_robot_srv::two_wheel_robot_updateResponse_<ContainerAllocator>& v)
  {
    s << indent << "response_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.response_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_ROBOT_SRV_MESSAGE_TWO_WHEEL_ROBOT_UPDATERESPONSE_H
