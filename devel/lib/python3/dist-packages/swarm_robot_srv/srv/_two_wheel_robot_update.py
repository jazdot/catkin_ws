# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from swarm_robot_srv/two_wheel_robot_updateRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class two_wheel_robot_updateRequest(genpy.Message):
  _md5sum = "b978865709518e2d2dfdb9ff9f97d3ea"
  _type = "swarm_robot_srv/two_wheel_robot_updateRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# service message to add or delete two wheel robot model in gazebo

# service request how-to:
# update_code >= CODE_ADD, add one robot
    # add_mode == ADD_MODE_RANDOM, add this robot at random position
        # specify the value of half_range
    # add_mode == ADD_MODE_SPECIFIED, add this robot at specified position
        # specify the value of position_2d
# update_code == CODE_DELETE_ALL, delete all robots
# update_code <= CODE_DELETE, delete robots a totoal number of abs(update_code)


# request constants
int32 CODE_DELETE = -1
int32 CODE_DELETE_ALL = 0
int32 CODE_ADD = 1
# first letter of True and False should be capitalized
bool ADD_MODE_RANDOM = False
bool ADD_MODE_SPECIFIED = True
# request fields
# sign indicates add or delete, absolute value means quantity
# 0 represents delete all
int32 update_code
bool add_mode
# the distribution when randomly adding a robot
float64 half_range
# the position when specifically adding a robot
float64[] position_2d
"""
  # Pseudo-constants
  CODE_DELETE = -1
  CODE_DELETE_ALL = 0
  CODE_ADD = 1
  ADD_MODE_RANDOM = False
  ADD_MODE_SPECIFIED = True

  __slots__ = ['update_code','add_mode','half_range','position_2d']
  _slot_types = ['int32','bool','float64','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       update_code,add_mode,half_range,position_2d

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(two_wheel_robot_updateRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.update_code is None:
        self.update_code = 0
      if self.add_mode is None:
        self.add_mode = False
      if self.half_range is None:
        self.half_range = 0.
      if self.position_2d is None:
        self.position_2d = []
    else:
      self.update_code = 0
      self.add_mode = False
      self.half_range = 0.
      self.position_2d = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iBd().pack(_x.update_code, _x.add_mode, _x.half_range))
      length = len(self.position_2d)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.position_2d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.update_code, _x.add_mode, _x.half_range,) = _get_struct_iBd().unpack(str[start:end])
      self.add_mode = bool(self.add_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position_2d = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iBd().pack(_x.update_code, _x.add_mode, _x.half_range))
      length = len(self.position_2d)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_2d.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.update_code, _x.add_mode, _x.half_range,) = _get_struct_iBd().unpack(str[start:end])
      self.add_mode = bool(self.add_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position_2d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iBd = None
def _get_struct_iBd():
    global _struct_iBd
    if _struct_iBd is None:
        _struct_iBd = struct.Struct("<iBd")
    return _struct_iBd
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from swarm_robot_srv/two_wheel_robot_updateResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class two_wheel_robot_updateResponse(genpy.Message):
  _md5sum = "f1e5cdee217c8e44265e1af6666572cf"
  _type = "swarm_robot_srv/two_wheel_robot_updateResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# response constants
uint8 SUCCESS = 1
uint8 ADD_FAIL_NO_RESPONSE = 2
uint8 ADD_FAIL_TOO_CROWDED = 3
    # too crowded when adding a number of robots
uint8 ADD_FAIL_OCCUPIED = 4
    # position ocupied when adding one robot
uint8 DELETE_FAIL_NO_RESPONSE = 5
uint8 DELETE_FAIL_EXCEED_QUANTITY = 6
uint8 FAIL_OTHER_REASONS = 7
# response fields
uint8 response_code


"""
  # Pseudo-constants
  SUCCESS = 1
  ADD_FAIL_NO_RESPONSE = 2
  ADD_FAIL_TOO_CROWDED = 3
  ADD_FAIL_OCCUPIED = 4
  DELETE_FAIL_NO_RESPONSE = 5
  DELETE_FAIL_EXCEED_QUANTITY = 6
  FAIL_OTHER_REASONS = 7

  __slots__ = ['response_code']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(two_wheel_robot_updateResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.response_code is None:
        self.response_code = 0
    else:
      self.response_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.response_code
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.response_code,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.response_code
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.response_code,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class two_wheel_robot_update(object):
  _type          = 'swarm_robot_srv/two_wheel_robot_update'
  _md5sum = '37c36975550b76d968b8b389672952f5'
  _request_class  = two_wheel_robot_updateRequest
  _response_class = two_wheel_robot_updateResponse
